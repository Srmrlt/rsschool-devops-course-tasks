pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
  - name: ci
    image: ci-agent:latest
    imagePullPolicy: IfNotPresent
    tty: true
    securityContext:
      privileged: true
"""
      defaultContainer 'ci'
    }
  }

  environment {
    REGISTRY = 'docker.io'
    IMAGE    = 'rs-school-flask-app'
    TAG      = "${env.GIT_COMMIT.take(8)}"
  }

  options {
    disableConcurrentBuilds()
    timeout(time: 15, unit: 'MINUTES')
  }

  triggers {
    pollSCM('H/5 * * * *')
  }

  stages {
    stage('diag-tools') {
      steps {
        sh '''
          echo "## kubectl";       kubectl version --client
          echo "## helm";          helm version --short
          echo "## buildctl";      buildctl --version
          echo "## sonar-scanner"; sonar-scanner --version | head -n1
        '''
      }
    }

    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Test') {
      steps {
        dir('flask_app') {
          sh '''
            python3 -m venv .venv
            . .venv/bin/activate
            pip install -r requirements.txt -r requirements-dev.txt
            pytest -q
          '''
        }
      }
    }

    stage('SonarQube') {
      steps {
        withSonarQubeEnv('sonar') {
          sh 'sonar-scanner'
        }
      }
    when { branch 'main' }
      post {
        success {
          timeout(time: 5, unit: 'MINUTES') {
            waitForQualityGate abortPipeline: true
          }
        }
      }
    }

    stage('Build image & Push') {
      steps {
        dir('flask_app') {
          withCredentials([usernamePassword(
            credentialsId: 'docker_hub',
            usernameVariable: 'DH_USER',
            passwordVariable: 'DH_PASS')]) {

            sh '''
              DOCKER_CONFIG=$HOME/.docker
              mkdir -p "$DOCKER_CONFIG"
              printf '%s' "$DH_USER:$DH_PASS" | base64 -w0 > /tmp/.docker_auth
              cat > $HOME/.docker/config.json <<EOF
{
  "auths": {
    "https://index.docker.io/v1/": {
      "auth": "$(cat /tmp/.docker_auth)"
    }
  }
}
EOF
              /usr/local/bin/buildctl-daemonless build \
                --frontend dockerfile.v0 \
                --local context=. \
                --local dockerfile=. \
                --opt filename=Dockerfile \
                --progress=plain \
                --output type=image,name=docker.io/$DH_USER/$IMAGE:$TAG,push=true
            '''
          }
        }
      }
    }

    stage('Deploy via Helm') {
      steps {
        sh """
          helm upgrade --install rs-flask ./helm-chart \
            --namespace flask-app --create-namespace \
            --values helm-chart/values.yaml \
            --atomic  --wait
        """
      }
    }

    stage('Smoke test') {
      steps {
        sh '''
          kubectl rollout status deployment/rs-flask-helm-chart \
            -n flask-app --timeout=120s

          curl -sf http://rs-flask-helm-chart.flask-app.svc.cluster.local:8080/
        '''
      }
    }
  }

post {
  success {
    slackSend webhookUrl: credentials('slack-webhook'),
              message: "✅ *${env.JOB_NAME}* #${env.BUILD_NUMBER} (${env.BRANCH_NAME}) passed"
  }
  failure {
    slackSend webhookUrl: credentials('slack-webhook'),
              message: "❌ *${env.JOB_NAME}* #${env.BUILD_NUMBER} (${env.BRANCH_NAME}) failed"
  }
}

}
